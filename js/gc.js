// Generated by CoffeeScript 1.10.0
(function() {
  var YouAreDaChef, _, exports,
    slice = [].slice;

  _ = require('underscore');

  YouAreDaChef = require('YouAreDaChef').YouAreDaChef;

  exports = window || this;

  exports.mixInto = function(arg) {
    var Cell, Square, each_leaf, old_add;
    Square = arg.Square, Cell = arg.Cell;
    _.extend(Square.cache, old_add = Square.cache.add, {
      add: function(square) {
        _.each(square.children(), function(v) {
          return v.incrementReference();
        });
        return old_add.call(this, square);
      },
      remove: function(square) {
        this.length -= 1;
        delete this.buckets[square.level][this.cache_key(square)];
        return square;
      }
    });
    _.extend(Cell.prototype, {
      has_references: function() {
        return true;
      },
      has_no_references: function() {
        return false;
      },
      has_one_reference: function() {
        return false;
      },
      has_many_references: function() {
        return true;
      },
      incrementReference: function() {
        return this;
      },
      decrementReference: function() {
        return this;
      },
      children: function() {
        return {};
      },
      remove: function() {},
      removeRecursively: function() {}
    });
    _.extend(Square.Smallest.prototype, {
      has_references: function() {
        return true;
      },
      has_no_references: function() {
        return false;
      },
      has_one_reference: function() {
        return false;
      },
      has_many_references: function() {
        return true;
      },
      incrementReference: function() {
        return this;
      },
      decrementReference: function() {
        return this;
      },
      children: function() {
        return {};
      },
      remove: function() {},
      removeRecursively: function() {}
    });
    _.extend(Square.Seed.prototype, {
      has_references: function() {
        return true;
      },
      has_no_references: function() {
        return false;
      },
      has_one_reference: function() {
        return false;
      },
      has_many_references: function() {
        return true;
      },
      incrementReference: function() {
        return this;
      },
      decrementReference: function() {
        return this;
      },
      children: function() {
        return {};
      },
      remove: function() {},
      removeRecursively: function() {}
    });
    YouAreDaChef('gc').clazz(Square).def({
      has_references: function() {
        return this.references > 0;
      },
      has_no_references: function() {
        return this.references === 0;
      },
      has_one_reference: function() {
        return this.references === 1;
      },
      has_many_references: function() {
        return this.references > 1;
      },
      incrementReference: function() {
        if (!(this.references >= 0)) {
          throw "incrementReference!? " + this.references;
        }
        this.references += 1;
        return this;
      },
      decrementReference: function() {
        if (!(this.references > 0)) {
          throw "decrementReference!?";
        }
        this.references -= 1;
        return this;
      },
      children: function() {
        return _.extend({
          nw: this.nw,
          ne: this.ne,
          se: this.se,
          sw: this.sw
        }, this.memoized);
      },
      remove: function() {
        if (this.references === 0) {
          Square.cache.remove(this);
          return _.each(this.children(), function(v) {
            return v.decrementReference();
          });
        }
      },
      removeRecursively: function() {
        if (this.references === 0) {
          Square.cache.remove(this);
          return _.each(this.children(), function(v) {
            v.decrementReference();
            return v.removeRecursively().method('initialize').after(function() {
              return this.references = 0;
            }).method('set_memo').before(function(index) {
              var existing;
              if ((existing = this.get_memo(index))) {
                return existing.decrementReference();
              }
            }).after(function(index, square) {
              return square.incrementReference();
            });
          });
        }
      }
    });
    _.extend(Square.cache, {
      removeablesByLevel: function() {
        return _.map(this.buckets, function(bucket) {
          if (bucket) {
            return _.select(_.values(bucket), function(sq) {
              return sq.has_no_references();
            });
          } else {
            return [];
          }
        });
      },
      removeables: function() {
        return _.reduce(this.removeablesByLevel().reverse(), function(re, level) {
          return re = re.concat(level);
        }, []);
      },
      full_gc: function() {
        return _.each(this.removeables(), function(sq) {
          return sq.removeRecursively();
        });
      },
      resize: function(from, to) {
        var i, old, r;
        if (Square.cache.length >= from) {
          old = Square.cache.length;
          r = this.removeables();
          i = 0;
          while (i < r.length && Square.cache.length > to) {
            r[i].removeRecursively();
            i += 1;
          }
          if (to > 0) {
            return typeof console !== "undefined" && console !== null ? console.log("GC: " + old + "->" + Square.cache.length) : void 0;
          }
        }
      }
    }, each_leaf = function(h, fn) {
      return _.each(h, function(value) {
        if (value instanceof Square) {
          return fn(value);
        } else if (value.nw instanceof Square) {
          fn(value.nw);
          fn(value.ne);
          fn(value.se);
          return fn(value.sw);
        }
      });
    }, {
      sequence: function() {
        var fns;
        fns = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        return _.compose.apply(_, _(fns).map(function(fn) {
          return function(parameter_hash) {
            each_leaf(parameter_hash, function(sq) {
              return sq.incrementReference();
            });
            Square.cache.resize(700000, 350000);
            return _.tap(fn(parameter_hash), function() {
              return each_leaf(parameter_hash, function(sq) {
                return sq.decrementReference();
              });
            });
          };
        }).reverse());
      }
    });
    "garbage collection can be disabled by commenting this line out";
    return Square.RecursivelyComputable.sequence = Square.cache.sequence;
  };

}).call(this);
