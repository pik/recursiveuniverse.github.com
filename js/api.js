// Generated by CoffeeScript 1.10.0
(function() {
  var YouAreDaChef, _, exports;

  _ = require('underscore');

  YouAreDaChef = require('YouAreDaChef').YouAreDaChef;

  exports = window || this;

  exports.mixInto = function(arg) {
    var Cell, Square;
    Square = arg.Square, Cell = arg.Cell;
    YouAreDaChef('api').clazz(Cell).def({
      to_json: function() {
        return [[this.value]];
      },
      toString: function() {
        return '' + this.value;
      }
    }).clazz(Square).def({
      to_json: function() {
        var a, b;
        a = {
          nw: this.nw.to_json(),
          ne: this.ne.to_json(),
          se: this.se.to_json(),
          sw: this.sw.to_json()
        };
        b = {
          top: _.map(_.zip(a.nw, a.ne), function(arg1) {
            var left, right;
            left = arg1[0], right = arg1[1];
            if (_.isArray(left)) {
              return left.concat(right);
            } else {
              return [left, right];
            }
          }),
          bottom: _.map(_.zip(a.sw, a.se), function(arg1) {
            var left, right;
            left = arg1[0], right = arg1[1];
            if (_.isArray(left)) {
              return left.concat(right);
            } else {
              return [left, right];
            }
          })
        };
        return b.top.concat(b.bottom);
      },
      toString: function() {
        return (_.map(this.to_json(), function(row) {
          var c;
          return ((function() {
            var j, len, results;
            results = [];
            for (j = 0, len = row.length; j < len; j++) {
              c = row[j];
              results.push([' ', '*'][c]);
            }
            return results;
          })()).join('');
        })).join('\n');
      }
    });
    if (!((Cell.Alive != null) && (Cell.Dead != null))) {
      throw 'Wanted alive or dead';
    }
    _.extend(Cell, {
      from_json: function(json) {
        if (!(Cell.Alive.value === 1 && Cell.Dead.value === 0)) {
          throw 'Unh?';
        }
        if (json.length === 1) {
          if (json[0][0] instanceof Cell) {
            return json[0][0];
          } else if (json[0][0] === 0) {
            return Cell.Dead;
          } else if (json[0][0] === 1) {
            return Cell.Alive;
          } else {
            throw 'a 1x1 square must contain a zero, one, or Cell';
          }
        } else {
          throw 'cannot handle larger squares';
        }
      }
    });
    _.extend(Square, {
      from_string: function(str) {
        var json, strs;
        strs = str.split('\n');
        json = _.map(strs, function(ln) {
          var c, j, len, results;
          results = [];
          for (j = 0, len = ln.length; j < len; j++) {
            c = ln[j];
            results.push({
              '.': 0,
              ' ': 0,
              'O': 1,
              '+': 1,
              '*': 1
            }[c]);
          }
          return results;
        });
        return Square.from_json(json);
      },
      from_json: function(json) {
        var dims, half_length, j, k, ref, ref1, results, results1, sz;
        dims = [json.length].concat(json.map(function(row) {
          return row.length;
        }));
        sz = Math.pow(2, Math.ceil(Math.log(Math.max.apply(Math, dims)) / Math.log(2)));
        _.each((function() {
          results = [];
          for (var j = 0, ref = json.length - 1; 0 <= ref ? j <= ref : j >= ref; 0 <= ref ? j++ : j--){ results.push(j); }
          return results;
        }).apply(this), function(i) {
          var k, ref1, results1;
          if (json[i].length < sz) {
            return json[i] = json[i].concat(_.map((function() {
              results1 = [];
              for (var k = 1, ref1 = sz - json[i].length; 1 <= ref1 ? k <= ref1 : k >= ref1; 1 <= ref1 ? k++ : k--){ results1.push(k); }
              return results1;
            }).apply(this), function() {
              return 0;
            }));
          }
        });
        if (json.length < sz) {
          json = json.concat(_.map((function() {
            results1 = [];
            for (var k = 1, ref1 = sz - json.length; 1 <= ref1 ? k <= ref1 : k >= ref1; 1 <= ref1 ? k++ : k--){ results1.push(k); }
            return results1;
          }).apply(this), function() {
            var l, results2;
            return _.map((function() {
              results2 = [];
              for (var l = 1; 1 <= sz ? l <= sz : l >= sz; 1 <= sz ? l++ : l--){ results2.push(l); }
              return results2;
            }).apply(this), function() {
              return 0;
            });
          }));
        }
        if (json.length === 1) {
          return Cell.from_json(json);
        } else {
          half_length = json.length / 2;
          return Square["for"]({
            nw: Square.from_json(json.slice(0, half_length).map(function(row) {
              return row.slice(0, half_length);
            })),
            ne: Square.from_json(json.slice(0, half_length).map(function(row) {
              return row.slice(half_length);
            })),
            se: Square.from_json(json.slice(half_length).map(function(row) {
              return row.slice(half_length);
            })),
            sw: Square.from_json(json.slice(half_length).map(function(row) {
              return row.slice(0, half_length);
            }))
          });
        }
      }
    });
    YouAreDaChef('api').clazz(Cell).def({
      isEmpty: function() {
        return this.value === 0;
      }
    }).clazz(Square).def({
      trim: function() {
        var ref, ref1;
        if (((ref = this.nw) != null ? (ref1 = ref.sw) != null ? ref1.isEmpty() : void 0 : void 0) && this.nw.nw.isEmpty() && this.nw.ne.isEmpty() && this.ne.nw.isEmpty() && this.ne.ne.isEmpty() && this.ne.se.isEmpty() && this.se.ne.isEmpty() && this.se.se.isEmpty() && this.se.sw.isEmpty() && this.sw.se.isEmpty() && this.sw.sw.isEmpty() && this.sw.nw.isEmpty()) {
          return Square["for"]({
            nw: this.nw.se,
            ne: this.ne.sw,
            se: this.se.nw,
            sw: this.sw.ne
          }).trim();
        } else {
          return this;
        }
      }
    }).after({
      initialize: function() {
        return this.isEmpty = _.memoize(function() {
          var ref, ref1;
          return (((this.nw === (ref1 = this.ne) && ref1 === (ref = this.se)) && ref === this.sw)) && this.nw.isEmpty();
        });
      }
    });
    Cell.Dead.population = 0;
    Cell.Alive.population = 1;
    return YouAreDaChef('api').clazz(Square).after({
      initialize: function() {
        return this.population = this.nw.population + this.ne.population + this.se.population + this.sw.population;
      }
    });
  };

}).call(this);
