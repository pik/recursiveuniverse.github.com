// Generated by CoffeeScript 1.10.0
(function() {
  var YouAreDaChef, _, exports,
    slice = [].slice;

  _ = require('underscore');

  YouAreDaChef = require('YouAreDaChef').YouAreDaChef;

  exports = window || this;

  exports.mixInto = function(arg1) {
    var Cell, Square, memoize;
    Square = arg1.Square, Cell = arg1.Cell;
    YouAreDaChef('memoization').clazz(Square).def({
      get_memo: function(index) {
        return this.memoized[index];
      },
      set_memo: function(index, square) {
        return this.memoized[index] = square;
      }
    }).after({
      initialize: function() {
        return this.memoized = {};
      }
    });
    memoize = function() {
      var clazz, i, len, name, names, results;
      clazz = arguments[0], names = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      results = [];
      for (i = 0, len = names.length; i < len; i++) {
        name = names[i];
        results.push((function(name) {
          var method_body;
          method_body = clazz.prototype[name];
          return clazz.prototype[name] = function() {
            var args, index;
            args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            index = name + _.map(args, function(arg) {
              return "_" + arg;
            }).join('');
            return this.get_memo(index) || this.set_memo(index, method_body.call.apply(method_body, [this].concat(slice.call(args))));
          };
        })(name));
      }
      return results;
    };
    memoize(Square.Seed, 'result');
    return memoize(Square.RecursivelyComputable, 'result', 'result_at_time');
  };

}).call(this);
